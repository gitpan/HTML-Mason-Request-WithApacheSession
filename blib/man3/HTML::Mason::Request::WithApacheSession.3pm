.\" Automatically generated by Pod::Man v1.32, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Mason::Request::WithApacheSession 3"
.TH HTML::Mason::Request::WithApacheSession 3 "2002-07-15" "perl v5.6.1" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Mason::Request::WithApacheSession \- Add a session to the Mason Request object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your \fIhttpd.conf\fR file:
.PP
.Vb 4
\&  PerlSetVar  MasonRequestClass         HTML::Mason::Request::WithApacheSession
\&  PerlSetVar  MasonSessionCookieDomain  .example.com
\&  PerlSetVar  MasonSessionClass         Apache::Session::MySQL
\&  PerlSetVar  MasonSessionDataSource    dbi:mysql:somedb
.Ve
.PP
In a component:
.PP
.Vb 2
\&  $m->session->{foo} = 1;
\&  if ( $m->session->{bar}{baz} > 1 ) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module integrates \f(CW\*(C`Apache::Session\*(C'\fR into Mason by adding methods
to the Mason Request object available in all Mason components.
.PP
Any subrequests created by a request share the same session hash.
.SH "USAGE"
.IX Header "USAGE"
To use this module you need to tell Mason to use this class for
requests.  This can be done in one of two ways.  If you are
configuring Mason via your \fIhttpd.conf\fR file, simply add this:
.PP
.Vb 1
\&  PerlSetVar  MasonRequestClass  HTML::Mason::Request::WithApacheSession
.Ve
.PP
If you are using a \fIhandler.pl\fR file, simply add this parameter to
the parameters given to the ApacheHandler constructor:
.PP
.Vb 1
\&  request_class => 'HTML::Mason::Request::WithApacheSession'
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This module accepts quite a number of parameters, most of which are
simply passed through to \f(CW\*(C`Apache::Session\*(C'\fR.  For this reason, you are
advised to familiarize yourself with the \f(CW\*(C`Apache::Session\*(C'\fR
documentation before attempting to configure tihs module.
.Sh "Generic Parameters"
.IX Subsection "Generic Parameters"
.IP "\(bu session_class / MasonSessionClass  =>  class name" 4
.IX Item "session_class / MasonSessionClass  =>  class name"
The name of the \f(CW\*(C`Apache::Session\*(C'\fR subclass you would like to use.
.Sp
This module will load this class for you if necessary.
.Sp
This parameter is required.
.IP "\(bu session_always_write / MasonSessionAlwaysWrite  =>  boolean" 4
.IX Item "session_always_write / MasonSessionAlwaysWrite  =>  boolean"
If this is true, then this module will ensure that \f(CW\*(C`Apache::Session\*(C'\fR
writes the session.  If it is false, the default \f(CW\*(C`Apache::Session\*(C'\fR
behavior is used instead.
.Sp
This defaults to true.
.IP "\(bu session_allow_invalid_id / MasonSessionAllowInvalidId  =>  boolean" 4
.IX Item "session_allow_invalid_id / MasonSessionAllowInvalidId  =>  boolean"
If this is true, an attempt to create a session with a session id that
does not exist in the session storage will be ignored, and a new
session will be created instead.  If it is false, a
\&\f(CW\*(C`HTML::Mason::Exception::NonExistentSessionID\*(C'\fR exception will be
thrown instead.
.Sp
This defaults to true.
.Sh "Cookie-Related Parameters"
.IX Subsection "Cookie-Related Parameters"
.IP "\(bu session_use_cookie / MasonSessionUseCookie  =>  boolean" 4
.IX Item "session_use_cookie / MasonSessionUseCookie  =>  boolean"
If true, then this module will use \f(CW\*(C`Apache::Cookie\*(C'\fR to set and read
cookies that contain the session id.
.Sp
The cookie will be set again every time the client accesses a Mason
component.
.IP "\(bu session_cookie_name / MasonSessionCookieName  =>  name" 4
.IX Item "session_cookie_name / MasonSessionCookieName  =>  name"
This is the name of the cookie that this module will set.  This
defaults to \*(L"HTML\-Mason\-Request\-WithApacheSession\-cookie\*(R".
Corresponds to the \f(CW\*(C`Apache::Cookie\*(C'\fR \*(L"\-name\*(R" constructor parameter.
.IP "\(bu session_cookie_expires / MasonSessionCookieExpires  =>  expiration" 4
.IX Item "session_cookie_expires / MasonSessionCookieExpires  =>  expiration"
How long before the cookie expires.  This defaults to 1 day, \*(L"+1d\*(R".
Corresponds to the \*(L"\-expires\*(R" parameter.
.IP "\(bu session_cookie_domain / MasonSessionCookieDomain  =>  domain" 4
.IX Item "session_cookie_domain / MasonSessionCookieDomain  =>  domain"
This corresponds to the \*(L"\-domain\*(R" parameter.  If not given this will
not be set as part of the cookie.
.IP "\(bu session_cookie_path / MasonSessionCookiePath  =>  path" 4
.IX Item "session_cookie_path / MasonSessionCookiePath  =>  path"
Corresponds to the \*(L"\-path\*(R" parameter.  It defaults to \*(L"/\*(R".
.IP "\(bu session_cookie_secure / MasonSessionCookieSecure  =>  boolean" 4
.IX Item "session_cookie_secure / MasonSessionCookieSecure  =>  boolean"
Corresponds to the \*(L"\-secure\*(R" parameter.  It defaults to false.
.Sh "Apache::Session\-related Parameters"
.IX Subsection "Apache::Session-related Parameters"
These parameters are simply passed through to \f(CW\*(C`Apache::Session\*(C'\fR.
.IP "\(bu session_data_source / MasonSessionDataSource  =>  \s-1DSN\s0" 4
.IX Item "session_data_source / MasonSessionDataSource  =>  DSN"
Corresponds to the \f(CW\*(C`DataSource\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_user_name / MasonSessionUserName  =>  user name" 4
.IX Item "session_user_name / MasonSessionUserName  =>  user name"
Corresponds to the \f(CW\*(C`UserName\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_password / MasonSessionPassword  =>  password" 4
.IX Item "session_password / MasonSessionPassword  =>  password"
Corresponds to the \f(CW\*(C`Password\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_handle / MasonSessionHandle =>  \s-1DBI\s0 handle" 4
.IX Item "session_handle / MasonSessionHandle =>  DBI handle"
Corresponds to the \f(CW\*(C`Handle\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_lock_data_source / MasonSessionLockDataSource  =>  \s-1DSN\s0" 4
.IX Item "session_lock_data_source / MasonSessionLockDataSource  =>  DSN"
Corresponds to the \f(CW\*(C`LockDataSource\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::MySQL\*(C'\fR.
.IP "\(bu session_lock_user_name / MasonSessionLockUserName  =>  user name" 4
.IX Item "session_lock_user_name / MasonSessionLockUserName  =>  user name"
Corresponds to the \f(CW\*(C`LockUserName\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::MySQL\*(C'\fR.
.IP "\(bu session_lock_password / MasonSessionLockPassword  =>  password" 4
.IX Item "session_lock_password / MasonSessionLockPassword  =>  password"
Corresponds to the \f(CW\*(C`LockPassword\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::MySQL\*(C'\fR.
.IP "\(bu session_lock_handle / MasonSessionLockHandle  =>  \s-1DBI\s0 handle" 4
.IX Item "session_lock_handle / MasonSessionLockHandle  =>  DBI handle"
Corresponds to the \f(CW\*(C`LockHandle\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_commit / MasonSessionCommit =>  boolean" 4
.IX Item "session_commit / MasonSessionCommit =>  boolean"
Corresponds to the \f(CW\*(C`Commit\*(C'\fR parameter given to the DBI-related
session modules.
.IP "\(bu session_transaction / MasonSessionTransaction  =>  boolean" 4
.IX Item "session_transaction / MasonSessionTransaction  =>  boolean"
Corresponds to the \f(CW\*(C`Transaction\*(C'\fR parameter.
.IP "\(bu session_directory / MasonSessionDirectory  =>  directory" 4
.IX Item "session_directory / MasonSessionDirectory  =>  directory"
Corresponds to the \f(CW\*(C`Directory\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::File\*(C'\fR.
.IP "\(bu session_lock_directory / MasonSessionLockDirectory  =>  directory" 4
.IX Item "session_lock_directory / MasonSessionLockDirectory  =>  directory"
Corresponds to the \f(CW\*(C`LockDirectory\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::File\*(C'\fR.
.IP "\(bu session_file_name / MasonSessionFileName  =>  file name" 4
.IX Item "session_file_name / MasonSessionFileName  =>  file name"
Corresponds to the \f(CW\*(C`FileName\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::DB_File\*(C'\fR.
.IP "\(bu session_store / MasonSessionStore  =>  class" 4
.IX Item "session_store / MasonSessionStore  =>  class"
Corresponds to the \f(CW\*(C`Store\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Flex\*(C'\fR.
.IP "\(bu session_lock / MasonSessionLock  =>  class" 4
.IX Item "session_lock / MasonSessionLock  =>  class"
Corresponds to the \f(CW\*(C`Lock\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Flex\*(C'\fR.
.IP "\(bu session_generate / MasonSessionGenerate  =>  class" 4
.IX Item "session_generate / MasonSessionGenerate  =>  class"
Corresponds to the \f(CW\*(C`Generate\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Flex\*(C'\fR.
.IP "\(bu session_serialize / MasonSessionSerialize  =>  class" 4
.IX Item "session_serialize / MasonSessionSerialize  =>  class"
Corresponds to the \f(CW\*(C`Serialize\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Flex\*(C'\fR.
.IP "\(bu session_textsize / MasonSessionTextsize  =>  size" 4
.IX Item "session_textsize / MasonSessionTextsize  =>  size"
Corresponds to the \f(CW\*(C`textsize\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Sybase\*(C'\fR.
.IP "\(bu session_long_read_len / MasonSessionLongReadLen  =>  size" 4
.IX Item "session_long_read_len / MasonSessionLongReadLen  =>  size"
Corresponds to the \f(CW\*(C`LongReadLen\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::MySQL\*(C'\fR.
.IP "\(bu session_n_sems / MasonSessionNSems  =>  number" 4
.IX Item "session_n_sems / MasonSessionNSems  =>  number"
Corresponds to the \f(CW\*(C`NSems\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Lock::Semaphore\*(C'\fR.
.IP "\(bu session_semaphore_key / MasonSessionSemaphoreKey  =>  key" 4
.IX Item "session_semaphore_key / MasonSessionSemaphoreKey  =>  key"
Corresponds to the \f(CW\*(C`SemaphoreKey\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Lock::Semaphore\*(C'\fR.
.IP "\(bu session_mod_usertrack_cookie_name / MasonSessionModUsertrackCookieName  =>  name" 4
.IX Item "session_mod_usertrack_cookie_name / MasonSessionModUsertrackCookieName  =>  name"
Corresponds to the \f(CW\*(C`ModUsertrackCookieName\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::Generate::ModUsertrack\*(C'\fR.
.IP "\(bu session_save_path / MasonSessionSavePath  =>  path" 4
.IX Item "session_save_path / MasonSessionSavePath  =>  path"
Corresponds to the \f(CW\*(C`SavePath\*(C'\fR parameter given to
\&\f(CW\*(C`Apache::Session::PHP\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
As can be seen by the number of parameters above, \f(CW\*(C`Apache::Session\*(C'\fR
has \fBway\fR too many possibilities for me to test all of them.  This
means there are almost certainly bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Mason
